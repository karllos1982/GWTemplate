@page "/"
@page "/home"
@page "/login"
@inherits MainLayout
@layout MainLayout

@inject IJSRuntime JSRuntime
@inject IAppControllerAsync<UserAuthenticated> _appctrl
@inject IAuthGatewayManager _authservices
@inject IAppSettings _settings
@inject NavigationManager NavigationManager
@inject HttpClient _httpclient

<PageTitle>Login</PageTitle>


<div class="d-flex flex-column flex-root">
		
	<style>
        body { background-image: url('https://preview.keenthemes.com/metronic8/demo20/assets/media/auth/bg4.jpg'); } 
            [data-theme="dark"] 
            body { background-image: url('https://preview.keenthemes.com/metronic8/demo20/assets/media/auth/bg4-dark.jpg'); }
     </style>


    @if (user != null && texts != null)
    {
        <div class="d-flex flex-column flex-column-fluid flex-lg-row">

            <div class="d-flex flex-center w-lg-50 pt-15 pt-lg-0 px-10">

                <div class="d-flex flex-center flex-lg-start flex-column">

                    <a href="home" class="mb-7">
                        <img alt="Logo" src="https://preview.keenthemes.com/metronic8/demo20/assets/media/logos/custom-3.svg" />
                    </a>

                    <h2 class="text-white fw-normal m-0">@texts.Welcome_Label </h2>
                </div>

            </div>

            <div class="d-flex flex-center w-lg-50 p-10">

                <div class="card rounded-3 w-md-550px">

                    <div class="card-body p-10 p-lg-20">
                     
                            <div class="text-center mb-11">

                            <h1 class="text-dark fw-bolder mb-3">@texts.LoginTitle_Label</h1>
                            <div class="text-gray-500 fw-semibold fs-6">@texts.LoginTitle_Description</div>

                            </div>

                            <div class="fv-row mb-8">

                                <input type="email" @bind-value=@user.Email class="form-control bg-transparent"
                                     maxlength="100" placeholder=@texts.InputEmail_Description>

                        </div>

                            <div class="fv-row mb-3">

                                 <input type="password" @bind-value=@pwd class="form-control bg-transparent"
                               maxlength="10" placeholder=@texts.InputPassword_Description>

                        </div>

                            <div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
                                <div></div>

                                <a @onclick="RecoveryPassword" class="link-primary a-link">@texts.ForgetPassword_Description</a>

                            </div>

                            <div class="d-grid mb-10">
                                         <TaskButton @ref="loginbtn" Title=@texts.LoginButton_Label
                                                ActionLabel=@texts.LoginLoading_Label OnClick="ExecuteLogin"> 
                                        </TaskButton>

                                        <TaskLoading @ref="loadingPwd" Title=@texts.SendText_Description></TaskLoading>

                            </div>

                        <div class="text-gray-500 text-center fw-semibold fs-6">
                                        @texts.ActiveAccount_Description
                            <a @onclick="ShowActiveModal" class="link-primary a-link">@texts.ActiveAccountButton_Label</a>
                        </div>

                    </div>

                </div>

            </div>

        </div>

    }
    else
    {
         <img src="../images/circle_loader.gif" style="width:32px;height:32px" />
    }

</div>


<MessageBox @ref="msgbox"></MessageBox>

@if (texts != null)
{
    <Modal @ref="modalRef"  >
        <ModalContent Centered Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>@texts.ActiveAccount_Label</ModalTitle>
                <CloseButton></CloseButton>
            </ModalHeader>
            <ModalBody>

                <div class="row">
                    <div class="col-md-9">                    
                        <h5>1. @texts.ActiveAccount_Step1:</h5>					
                        <input type="email" @bind-value=@active.Email class="form-control bg-transparent" maxlength="100"
                           placeholder=@texts.InputEmail_Description>
                    </div>

                    <div class="col-md-3">    
                        <br/>
                        <TaskButton @ref="sendcodebtn" OnClick="SendActiveAccountCode" Title=@texts.SendCodeButton_Label
                                ActionLabel=@texts.SendText_Description></TaskButton>
                    </div>
                </div>

                <div class="row" style="margin-top:20px">
                    <div class="col-md-9">
                        <h5>2. @texts.ActiveAccount_Step2:</h5>
                        <input type="text" @bind-value=@active.Code class="form-control bg-transparent" maxlength="20"
                           placeholder=@texts.InputCode_Description>
                    </div>

                    <div class="col-md-3">  
                        <br/>
                        <TaskButton @ref="activebtn" Title=@texts.ActiveAccountButton_Label OnClick="ActivateAccount"
                                ActionLabel=@texts.ActiveLoading_Label></TaskButton>

                    </div>

                </div>         

            </ModalBody>      
        </ModalContent>
    </Modal>
}

@code {

    private Modal modalRef;
    private UserLogin user = new UserLogin();
    private string pwd = "";
    private ActiveUserAccount active = new ActiveUserAccount();
    private MessageBox msgbox;
    private TaskButton loginbtn;
    private TaskButton activebtn;
    private TaskButton sendcodebtn;    
    private TaskLoading loadingPwd;
    private bool islogged = false;

    private BaseLocalization texts = null; 

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void InitResources()
    {

        ((TemplateAppController)_appctrl).Settings = _settings;

        _authservices.Init(_httpclient,_settings.ServiceURL,"");


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                this.InitResources();
                string url = _settings.SiteURL;

                List<LocalizationTextResult> list;
                list = await ((AuthGateway)_authservices).ListLocalizationTexts(); 

                this.texts = new DataLogLocalization();
                this.texts.FillTexts(list ,_settings.DefaultLanguage);

                islogged = await _appctrl.IsAuthenticated();

                if (islogged)
                {
                    await _appctrl.GetSession();

                    UserAuthenticated usr = _appctrl.UserInfo;

                    url = _settings.SiteURL + "/" + usr.HomeURL;
                    NavigationManager.NavigateTo(url);
                }
            }
            catch(Exception ex)
            {

            }

            StateHasChanged();
        }

    }

    private async Task ExecuteLogin()
    {

        try
        {   
            this.InitResources();                

            if (user.Email != null && pwd != null)
            {

                user.Password = GW.Helpers.Utilities.ConvertToBase64(pwd); 

                loginbtn.Begin();

                OperationStatus ret = await _appctrl.Login(_authservices, user);

                if (ret.Status)
                {
                    UserAuthenticated user = (UserAuthenticated)ret.Returns;
                    string url = _settings.SiteURL + "/"+ user.HomeURL;
                    NavigationManager.NavigateTo(url);                    
                }
                else
                {                    
                    await  msgbox.ShowDialog(texts.NoticeLabel, ret.Error.Message);
                }

            }
            else
            {                
                await msgbox.ShowDialog(texts.InvalidCredentials_Title, texts.InvalidCredentials_Message);
            }
        }
        catch(Exception ex)
        {            
            await msgbox.ShowDialog(texts.NoticeLabel, ex.Message);
        }       

        loginbtn.End();

    }

    private async Task  RecoveryPassword()
    {
        InitResources();


        if (user.Email != null)
        {

            await loadingPwd.Begin();

            AuthGateway gateway = (AuthGateway)_authservices;

            await gateway.RecoveryPassword(user.Email);

            if (gateway.APIResponse.StatusOK)
            {
                await msgbox.ShowDialog(texts.TemporaryPassword_Title,
                    texts.TemporaryPassword_Message);
            }
            else
            {
                Exception error = null;
                gateway.GetDefaultError(ref error); 
                await msgbox.ShowDialog(texts.NoticeLabel, error.Message);
            }         

             await loadingPwd.End();
        }
        else
        {

            await msgbox.ShowDialog(texts.NoticeLabel, texts.InputEmail_Description);
        }

    }

    private async Task SendActiveAccountCode()
    {
        this.InitResources();

        if (active.Email != null)
        {
            sendcodebtn.Begin();
            AuthGateway gateway = (AuthGateway)_authservices;

            await gateway.RequestActiveAccountCode(active.Email);

            if (gateway.APIResponse.StatusOK)
            {
                await msgbox.ShowDialog(texts.ActivateCode_Title, texts.ActivateCode_Message);
            }
            else
            {
                Exception error = null;
                gateway.GetDefaultError(ref error); 
                await msgbox.ShowDialog(texts.NoticeLabel, error.Message);
            }
            sendcodebtn.End();
        }
        else
        {
            await msgbox.ShowDialog(texts.NoticeLabel, texts.InputEmail_Description);

        }

        await modalRef.Hide();      

    }

    private async Task ActivateAccount()
    {
        this.InitResources();

        if (active.Code != null)
        {
            activebtn.Begin();
            AuthGateway gateway = (AuthGateway)_authservices;

            await gateway.ActiveAccount(active);

            if (gateway.APIResponse.StatusOK)
            {
               await  msgbox.ShowDialog(texts.SuccessActivated_Title, texts.SuccessActivated_Message);              
            }
            else
            {
                Exception error = null;
                gateway.GetDefaultError(ref error); 
                await msgbox.ShowDialog(texts.NoticeLabel, error.Message);
            }

            activebtn.End();
        }
        else
        {
            await msgbox.ShowDialog(texts.NoticeLabel, texts.InputCode_Description);

        }

        await modalRef.Hide();   
        
    }

      

    private async Task ShowActiveModal()
    {
        await modalRef.Show();      
        
    }

}